// automatically generated by the FlatBuffers compiler, do not modify
"use strict";
/**
 * @enum
 */
var IndisMQ;
(function (IndisMQ) {
    (function (MsgType) {
        MsgType[MsgType["NONE"] = 0] = "NONE";
        MsgType[MsgType["PEER"] = 1] = "PEER";
        MsgType[MsgType["MULT"] = 2] = "MULT";
        MsgType[MsgType["QUEUE"] = 3] = "QUEUE";
        MsgType[MsgType["CMD"] = 4] = "CMD";
    })(IndisMQ.MsgType || (IndisMQ.MsgType = {}));
    var MsgType = IndisMQ.MsgType;
})(IndisMQ = exports.IndisMQ || (exports.IndisMQ = {}));
/**
 * @enum
 */
(function (IndisMQ) {
    (function (Cmd) {
        Cmd[Cmd["NONE"] = 0] = "NONE";
        Cmd[Cmd["SUB"] = 1] = "SUB";
        Cmd[Cmd["UNSUB"] = 2] = "UNSUB";
        Cmd[Cmd["SYN"] = 3] = "SYN";
    })(IndisMQ.Cmd || (IndisMQ.Cmd = {}));
    var Cmd = IndisMQ.Cmd;
})(IndisMQ = exports.IndisMQ || (exports.IndisMQ = {}));
/**
 * @enum
 */
(function (IndisMQ) {
    (function (Sts) {
        Sts[Sts["NONE"] = 0] = "NONE";
        Sts[Sts["ERROR"] = 1] = "ERROR";
        Sts[Sts["REQ"] = 2] = "REQ";
        Sts[Sts["REP"] = 3] = "REP";
        Sts[Sts["CANCEL"] = 4] = "CANCEL";
        Sts[Sts["SUCCESS"] = 5] = "SUCCESS";
    })(IndisMQ.Sts || (IndisMQ.Sts = {}));
    var Sts = IndisMQ.Sts;
})(IndisMQ = exports.IndisMQ || (exports.IndisMQ = {}));
/**
 * @enum
 */
(function (IndisMQ) {
    (function (Err) {
        Err[Err["NONE"] = 0] = "NONE";
        Err[Err["NO_HANDLER"] = 1] = "NO_HANDLER";
        Err[Err["INVALID"] = 2] = "INVALID";
        Err[Err["REMOTE"] = 3] = "REMOTE";
        Err[Err["TIMEOUT"] = 4] = "TIMEOUT";
    })(IndisMQ.Err || (IndisMQ.Err = {}));
    var Err = IndisMQ.Err;
})(IndisMQ = exports.IndisMQ || (exports.IndisMQ = {}));
/**
 * @constructor
 */
(function (IndisMQ) {
    var Ver = (function () {
        function Ver() {
            /**
             * @type {flatbuffers.ByteBuffer}
             */
            this.bb = null;
            /**
             * @type {number}
             */
            this.bb_pos = 0;
        }
        /**
         * @param {number} i
         * @param {flatbuffers.ByteBuffer} bb
         * @returns {Ver}
         */
        Ver.prototype.__init = function (i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        };
        ;
        /**
         * @returns {number}
         */
        Ver.prototype.Major = function () {
            return this.bb.readInt8(this.bb_pos);
        };
        ;
        /**
         * @returns {number}
         */
        Ver.prototype.Minor = function () {
            return this.bb.readInt8(this.bb_pos + 1);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {number} Major
         * @param {number} Minor
         * @returns {flatbuffers.Offset}
         */
        Ver.createVer = function (builder, Major, Minor) {
            builder.prep(1, 2);
            builder.writeInt8(Minor);
            builder.writeInt8(Major);
            return builder.offset();
        };
        ;
        return Ver;
    }());
    IndisMQ.Ver = Ver;
})(IndisMQ = exports.IndisMQ || (exports.IndisMQ = {}));
/**
 * @constructor
 */
(function (IndisMQ) {
    var Imq = (function () {
        function Imq() {
            /**
             * @type {flatbuffers.ByteBuffer}
             */
            this.bb = null;
            /**
             * @type {number}
             */
            this.bb_pos = 0;
        }
        /**
         * @param {number} i
         * @param {flatbuffers.ByteBuffer} bb
         * @returns {Imq}
         */
        Imq.prototype.__init = function (i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        };
        ;
        /**
         * @param {flatbuffers.ByteBuffer} bb
         * @param {Imq=} obj
         * @returns {Imq}
         */
        Imq.getRootAsImq = function (bb, obj) {
            return (obj || new Imq).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        };
        ;
        /**
         * @param {flatbuffers.ByteBuffer} bb
         * @returns {boolean}
         */
        Imq.bufferHasIdentifier = function (bb) {
            return bb.__has_identifier('0001');
        };
        ;
        /**
         * @param {number} index
         * @returns {number}
         */
        Imq.prototype.Body = function (index) {
            var offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
        };
        ;
        /**
         * @returns {number}
         */
        Imq.prototype.BodyLength = function () {
            var offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        };
        ;
        /**
         * @returns {Uint8Array}
         */
        Imq.prototype.BodyArray = function () {
            var offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
        };
        ;
        Imq.prototype.From = function (optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        };
        ;
        Imq.prototype.To = function (optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        };
        ;
        /**
         * @returns {boolean}
         */
        Imq.prototype.Broker = function () {
            var offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
        };
        ;
        /**
         * @returns {IndisMQ.Cmd}
         */
        Imq.prototype.Cmd = function () {
            var offset = this.bb.__offset(this.bb_pos, 12);
            return offset ? (this.bb.readInt8(this.bb_pos + offset)) : IndisMQ.Cmd.NONE;
        };
        ;
        Imq.prototype.MsgId = function (optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 14);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        };
        ;
        /**
         * @returns {IndisMQ.MsgType}
         */
        Imq.prototype.MsgType = function () {
            var offset = this.bb.__offset(this.bb_pos, 16);
            return offset ? (this.bb.readInt8(this.bb_pos + offset)) : IndisMQ.MsgType.NONE;
        };
        ;
        /**
         * @returns {IndisMQ.Sts}
         */
        Imq.prototype.Sts = function () {
            var offset = this.bb.__offset(this.bb_pos, 18);
            return offset ? (this.bb.readInt8(this.bb_pos + offset)) : IndisMQ.Sts.NONE;
        };
        ;
        Imq.prototype.Path = function (optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 20);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        };
        ;
        /**
         * @returns {IndisMQ.Err}
         */
        Imq.prototype.Err = function () {
            var offset = this.bb.__offset(this.bb_pos, 22);
            return offset ? (this.bb.readInt8(this.bb_pos + offset)) : IndisMQ.Err.NONE;
        };
        ;
        Imq.prototype.StsMsg = function (optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 24);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        };
        ;
        /**
         * @returns {boolean}
         */
        Imq.prototype.Callback = function () {
            var offset = this.bb.__offset(this.bb_pos, 26);
            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
        };
        ;
        /**
         * @param {IndisMQ.Ver=} obj
         * @returns {IndisMQ.Ver}
         */
        Imq.prototype.Ver = function (obj) {
            var offset = this.bb.__offset(this.bb_pos, 28);
            return offset ? (obj || new IndisMQ.Ver).__init(this.bb_pos + offset, this.bb) : null;
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         */
        Imq.startImq = function (builder) {
            builder.startObject(13);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {flatbuffers.Offset} BodyOffset
         */
        Imq.addBody = function (builder, BodyOffset) {
            builder.addFieldOffset(0, BodyOffset, 0);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {Array.<number>} data
         * @returns {flatbuffers.Offset}
         */
        Imq.createBodyVector = function (builder, data) {
            if (!data) {
                return null;
            }
            builder.startVector(1, data.length, 1);
            for (var i = data.length - 1; i >= 0; i--) {
                builder.addInt8(data[i]);
            }
            return builder.endVector();
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {number} numElems
         */
        Imq.startBodyVector = function (builder, numElems) {
            builder.startVector(1, numElems, 1);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {flatbuffers.Offset} FromOffset
         */
        Imq.addFrom = function (builder, FromOffset) {
            builder.addFieldOffset(1, FromOffset, 0);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {flatbuffers.Offset} ToOffset
         */
        Imq.addTo = function (builder, ToOffset) {
            builder.addFieldOffset(2, ToOffset, 0);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {boolean} Broker
         */
        Imq.addBroker = function (builder, Broker) {
            builder.addFieldInt8(3, +Broker, +false);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {IndisMQ.Cmd} Cmd
         */
        Imq.addCmd = function (builder, Cmd) {
            builder.addFieldInt8(4, Cmd, IndisMQ.Cmd.NONE);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {flatbuffers.Offset} MsgIdOffset
         */
        Imq.addMsgId = function (builder, MsgIdOffset) {
            builder.addFieldOffset(5, MsgIdOffset, 0);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {IndisMQ.MsgType} MsgType
         */
        Imq.addMsgType = function (builder, MsgType) {
            builder.addFieldInt8(6, MsgType, IndisMQ.MsgType.NONE);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {IndisMQ.Sts} Sts
         */
        Imq.addSts = function (builder, Sts) {
            builder.addFieldInt8(7, Sts, IndisMQ.Sts.NONE);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {flatbuffers.Offset} PathOffset
         */
        Imq.addPath = function (builder, PathOffset) {
            builder.addFieldOffset(8, PathOffset, 0);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {IndisMQ.Err} Err
         */
        Imq.addErr = function (builder, Err) {
            builder.addFieldInt8(9, Err, IndisMQ.Err.NONE);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {flatbuffers.Offset} StsMsgOffset
         */
        Imq.addStsMsg = function (builder, StsMsgOffset) {
            builder.addFieldOffset(10, StsMsgOffset, 0);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {boolean} Callback
         */
        Imq.addCallback = function (builder, Callback) {
            builder.addFieldInt8(11, +Callback, +false);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {flatbuffers.Offset} VerOffset
         */
        Imq.addVer = function (builder, VerOffset) {
            builder.addFieldStruct(12, VerOffset, 0);
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @returns {flatbuffers.Offset}
         */
        Imq.endImq = function (builder) {
            var offset = builder.endObject();
            return offset;
        };
        ;
        /**
         * @param {flatbuffers.Builder} builder
         * @param {flatbuffers.Offset} offset
         */
        Imq.finishImqBuffer = function (builder, offset) {
            builder.finish(offset, '0001');
        };
        ;
        return Imq;
    }());
    IndisMQ.Imq = Imq;
})(IndisMQ = exports.IndisMQ || (exports.IndisMQ = {}));
